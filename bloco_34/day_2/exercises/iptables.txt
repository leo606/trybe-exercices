Exerc√≠cio 1 : Defina uma regra de firewall utilizando o comando iptables -A , que bloqueie ( block ou REJECT/DROP ) toda a entrada ( in ou INPUT ) de pacotes utilizando o protocolo ICMP , impedindo assim que a m√°quina responda ao comando ping . Lembre-se, voc√™ pode executar o comando ping para validar se sua regra est√° funcionando corretamente: ping 127.0.0.1 (voc√™ pode adicionar o par√¢metro -O para exibir os pings rejeitados tamb√©m üòâ).
  sudo iptables -A INPUT -p ICMP -j REJECT

Exerc√≠cio 2 : Exclua a regra anterior utilizando o par√¢metro -D .
  sudo iptables -D INPUT -p ICMP -j REJECT

Exerc√≠cio 3 : Agora vamos criar uma regra para bloquear o tr√°fego HTTPS. Para isso, iremos bloquear a sa√≠da de pacotes ( out ou OUTPUT ). Lembre-se, a porta padr√£o para esse protocolo √© a 443 , para especific√°-la utilize o par√¢metro --sport . Ele utiliza tamb√©m o protocolo tcp . Para testar sua regra, tente acessar um site pelo navegador que use o protocolo, como o Youtube, o Google ou o Facebook.
  iptables -A OUTPUT -p tcp --sport 443 -j REJECT

Exerc√≠cio 4 : Bloqueie agora o tr√°fego de sa√≠da para HTTP. Lembre-se, tamb√©m √© utilizado o protocolo tcp e a porta 80 . Para testar sua regra, tente acessar um site pelo navegador que use HTTP .
  sudo iptables -A OUTPUT -p tcp --sport 80 -j REJECT

Exerc√≠cio 5 : Para finalizar, vamos limpar todas as regras. Para isso, utilize o comando --flush do iptables (Linux).
  iptables --flush
  iptables -F

Exerc√≠cio 6 : Agora, vamos utilizar um tipo de proxy bem legal que pode ser bastante √∫til no nosso dia como pessoas desenvolvedoras: o NGROK . Com ele conseguimos criar um t√∫nel para o nosso localhost.
  ngrok http 80